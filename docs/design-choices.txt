We made use of good OOD by creating a loose coupling between the logic of the game and the UI. We saw this necessary because of how the GUI would be later implemented and would such need a loose coupling in order for future classes that would be reliant on the UI to not have to work around the logical code that would be in the way. We also made use of having an empty Deadwood class that would have a static method and would implement the code of the game so that the static main method would not influence the surrounding methods and variables. We also make all of the variables of the classes private, and only accessable to other classes through using getters and setters, keeping the information secure and demonstrates encapsulation. One thing we wanted to implement, but ran out of time for, was to make the board class a singleton so that there would only be one instance. We also wanted to experiment with making the Game class and the XMLparser singleton as well. For assignment 5 we also wanted to try and make a parent class called "Tiles" that would be a parent class to the objects sets, trailer, and office, such that we could have a list of them all in a managable orientation without making one unorganized class. 
