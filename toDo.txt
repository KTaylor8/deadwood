Remaining tasks:
- handle ties -- Katie (implemented something *untested*)
- test upgrading works -- Lilu
- test that the game will reset at the end of the day -- Katie
- test that acting awards the correct amounts at the end of it 
- go through classes and make some public stuff private
  X Deadwood
  - Board
  - Player
  - Card
  - Set
  - Role
- clean stuff up and add comments
If time:
- make board singleton


Deadwood:Lilu
- create board
- prompt how many players
- create ^ many players
- UI
- fix the absolutely wild if statements for the move condition cause theres def a better way to do that
- figure out something for ties
-Questions:
  -did we have act thing in game or board???????? (im making that a problem for later)




Board:
- initialize positions
- reset board
- initialize sets
- endDay
	- counter of how many remaining sets
- endGame
- getPlayerPos


Set:
- initialize set card(role)
- shuffle sets
- wrap scene
	- figure out if end day after wrap scene?
- calculate bonuses/pay player
- create get methods

Role:
- create get methods (level, dialouge, name)
- on card/off card
- isOccupied
- makeOccupied


Player:
x initialize player
- action options
x get methods for money/role
x calc final score
x changeRole


CastingOffice:
x get upgrade costs
- verify upgrades -> might not need (Lilu)


Design updates
(keep and update a brief change log)
--update CastingOffice's methods to match actual implementation plan-- remove CastingOffice
- change Game class to Deadwood class
- change reset board sequence diagram to init board before players

Other:
- get ParseXML example working -- Katie
  X cards.xml -- Katie
  X board.xml -- Katie
- use parsing example to parse data for actual game use -- Katie
  X make a class for the card -- Katie
  - make parser load card objects into a stack (may change the datatype later) -- Katie
  - make parser load board set objects into a stack (may change the datatype later) -- Katie
  - load board parts/roles into their sets on board.java -- Katie
  - loads cards' parts/roles into their cards -- Katie
  - at the start of each day, each set randomly gets a card and adds its on-card roles to the array of off-card roles (differentiated via attribute)
  - this needs to be updated on the design.pdf
- READ.ME with instructions on how to compile and run the code
- design-choices specify what types of cohesion and coupling you utilized in your design and your rationale for using them. Also discuss your overall design choices and how they relate to good software design principles.
- individual 4 paragraph submissions on Canvas
  - Katie
  - Lilu