Remaining tasks:
X handle ties -- Katie (implemented something *untested*)
x test upgrading works -- Lilu
x test that the game will reset at the end of the day -- Katie
x test that acting awards the correct amounts at the end of it 
X go through classes and make some public stuff private
  X Deadwood
  x Board
  x Player
  x Card
  x Set
  x Role
x clean stuff up and add comments
If time:
- make board singleton -- this might actually be hard w/ the args...

Written stuff:
X READ.ME with instructions on how to compile and run the code -- Lilu
- update assignment 3 doc class diagram and upload it as repo design.pdf
  - keep a brief change log as we go (a brief description of what you changed and why)
  - add the change log to the document
- design-choices specify what types of cohesion and coupling you utilized in your design and your rationale for using them. Also discuss your overall design choices and how they relate to good software design principles.
- individual 4 paragraph submissions on Canvas
  - Katie
  - Lilu

Some design updates
(keep and update a brief change log)
--update CastingOffice's methods to match actual implementation plan-- remove CastingOffice
- change Game class to Deadwood class
- change reset board sequence diagram to init board before players


Deadwood:
x create board -Lilu
x prompt how many players -Lilu
x create ^ many players
x UI
? fix the absolutely wild if statements for the move condition cause theres def a better way to do that


Board:
x initialize positions
x reset board
x initialize sets
x endDay
	x counter of how many remaining sets
x endGame
x getPlayerPos


Set:
x initialize set card(role)
x shuffle sets
x wrap scene
	x figure out if end day after wrap scene?
x calculate bonuses/pay player
x create get methods

Role:
x create get methods (level, dialog, name)
x on card/off card
x isOccupied
x makeOccupied


Player:
x initialize player
x action options
x get methods for money/role
x calc final score
x changeRole


CastingOffice:
x get upgrade costs
x verify upgrades -> might not need (Lilu)


Other:
- get ParseXML example working -- Katie
  X cards.xml -- Katie
  X board.xml -- Katie
- use parsing example to parse data for actual game use -- Katie
  X make a class for the card -- Katie
  x make parser load card objects into a stack (may change the datatype later) -- Katie
  x make parser load board set objects into a stack (may change the datatype later) -- Katie
  x load board parts/roles into their sets on board.java -- Katie
  x loads cards' parts/roles into their cards -- Katie
  x at the start of each day, each set randomly gets a card and adds its on-card roles to the array of off-card roles (differentiated via attribute)
  - this needs to be updated on the design.pdf



For A5:
- Player gets Role obj instead of String roleName
  - make getRole() method in Player
  - address the comment that has the word CONVOLUTED
- implement singleton design pattern in Game 
- clean up freeRoles() in Board
- clean up logic flow between objects for employ()
- edit based on A4 feedback

For GUI:

  -change the player names from interactive to preprogrammed
  -make the interactive panel
  -make action buttons connect to game activities
  -make the upgrade station

LILU NOTES:
What ive done with the GUI so far:
 - made the board and the formatting of the different things
 - kinda set up the controller interfaces and thing but we should add more things to it as we initialize the buttons
 - gave the cards their paths to their corresponding pngs
 - gave the players a corresponding color (i thought this would be an easy way to grab the diff dice without giving them 6 different 
   dice but thats also an option if this doesn't work)
 - Created a popup method that will give sudden updates that we can use if a scene is wrapping up or with the success of acts, or at the end of days and winners
 - worked out the end game logic so that it ends with a popup (i like those lol)
 - I commented out a lot of the game method so that I could try to move it from the UI to the GUI

Things that we could work out immediately:
- moving would probably be the best first thing to do, and we have to figure out where we want the dice when they're idle
  -we could use another popup thing and then have buttons? and they could choose where they want to move?
- placing cards (with the backs)
- placing shot tokens
- putting the dice graphics on the board (i mostly had difficulty with placements because I cant get them exact with my version cropping)
